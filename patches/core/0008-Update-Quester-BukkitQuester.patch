From 312d59c067a76d768f66c0acd27f48a055cd7b21 Mon Sep 17 00:00:00 2001
From: Euphyllia Bierque <bierque.euphyllia@gmail.com>
Date: Sat, 25 May 2024 20:33:46 +0200
Subject: [PATCH 08/14] Update Quester BukkitQuester

---
 .../me/pikamug/quests/player/Quester.java     |  4 +--
 .../pikamug/quests/player/BukkitQuester.java  | 29 ++++++++++---------
 2 files changed, 17 insertions(+), 16 deletions(-)

diff --git a/api/src/main/java/me/pikamug/quests/player/Quester.java b/api/src/main/java/me/pikamug/quests/player/Quester.java
index 5ed993a57..4db91b1d1 100644
--- a/api/src/main/java/me/pikamug/quests/player/Quester.java
+++ b/api/src/main/java/me/pikamug/quests/player/Quester.java
@@ -73,9 +73,9 @@ public interface Quester extends Comparable<Quester> {
 
     ConcurrentHashMap<ScheduledTask, Quest> getTimers();
 
-    void setTimers(final ConcurrentHashMap<Integer, Quest> timers);
+    void setTimers(final ConcurrentHashMap<ScheduledTask, Quest> timers);
 
-    void removeTimer(final Integer timerId);
+    void removeTimer(final ScheduledTask timerId);
 
     ConcurrentHashMap<Quest, Integer> getCurrentQuests();
 
diff --git a/core/src/main/java/me/pikamug/quests/player/BukkitQuester.java b/core/src/main/java/me/pikamug/quests/player/BukkitQuester.java
index 68607e40d..dcdc7f5d3 100644
--- a/core/src/main/java/me/pikamug/quests/player/BukkitQuester.java
+++ b/core/src/main/java/me/pikamug/quests/player/BukkitQuester.java
@@ -15,6 +15,7 @@ import com.alessiodp.parties.api.interfaces.PartyPlayer;
 import com.gmail.nossr50.datatypes.skills.SkillType;
 import com.gmail.nossr50.util.player.UserManager;
 import io.github.znetworkw.znpcservers.npc.NPC;
+import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
 import lol.pyr.znpcsplus.api.npc.Npc;
 import me.clip.placeholderapi.PlaceholderAPI;
 import me.pikamug.localelib.LocaleManager;
@@ -106,7 +107,7 @@ public class BukkitQuester implements Quester {
     protected int questPoints = 0;
     private String compassTargetQuestId;
     private long lastNotifiedCondition = 0L;
-    protected ConcurrentHashMap<Integer, Quest> timers = new ConcurrentHashMap<>();
+    protected ConcurrentHashMap<ScheduledTask, Quest> timers = new ConcurrentHashMap<>();
     protected ConcurrentHashMap<Quest, Integer> currentQuests = new ConcurrentHashMap<Quest, Integer>() {
 
         private static final long serialVersionUID = 6361484975823846780L;
@@ -325,17 +326,17 @@ public class BukkitQuester implements Quester {
     }
 
     @Override
-    public ConcurrentHashMap<Integer, Quest> getTimers() {
+    public ConcurrentHashMap<ScheduledTask, Quest> getTimers() {
         return timers;
     }
 
     @Override
-    public void setTimers(final ConcurrentHashMap<Integer, Quest> timers) {
+    public void setTimers(final ConcurrentHashMap<ScheduledTask, Quest> timers) {
         this.timers = timers;
     }
 
     @Override
-    public void removeTimer(final Integer timerId) {
+    public void removeTimer(final ScheduledTask timerId) {
         this.timers.remove(timerId);
     }
 
@@ -3242,7 +3243,7 @@ public class BukkitQuester implements Quester {
     public void sayPassword(final Quest quest, final AsyncPlayerChatEvent evt) {
         final ObjectiveType type = ObjectiveType.PASSWORD;
         final Set<String> dispatchedQuestIDs = new HashSet<>();
-        plugin.getServer().getScheduler().runTask(plugin, () -> {
+        evt.getPlayer().getScheduler().run(plugin, (task) -> {
             final BukkitQuesterPreUpdateObjectiveEvent preEvent = new BukkitQuesterPreUpdateObjectiveEvent(this, quest,
                     new BukkitObjective(type, null, 1, 1));
             plugin.getServer().getPluginManager().callEvent(preEvent);
@@ -3254,8 +3255,8 @@ public class BukkitQuester implements Quester {
                     final String display = getCurrentStage(quest).getPasswordDisplays().get(index);
                     bukkitQuestData.passwordsSaid.set(index, true);
 
-                    plugin.getServer().getScheduler().runTask(plugin, () -> finishObjective(quest, new BukkitObjective(type, null, new ItemStack(Material.AIR, 1),
-                            new ItemStack(Material.AIR, 1)), null, null, null, null, null, display, null));
+                    evt.getPlayer().getScheduler().run(plugin, (task1) -> finishObjective(quest, new BukkitObjective(type, null, new ItemStack(Material.AIR, 1),
+                            new ItemStack(Material.AIR, 1)), null, null, null, null, null, display, null), null);
 
                     final int finalIndex = index;
                     dispatchedQuestIDs.addAll(dispatchMultiplayerEverything(quest, type,
@@ -3276,7 +3277,7 @@ public class BukkitQuester implements Quester {
             final BukkitQuesterPostUpdateObjectiveEvent postEvent = new BukkitQuesterPostUpdateObjectiveEvent(this, quest,
                     new BukkitObjective(type, null, 1, 1));
             plugin.getServer().getPluginManager().callEvent(postEvent);
-        });
+        }, null);
     }
     
     /**
@@ -4039,10 +4040,10 @@ public class BukkitQuester implements Quester {
      */
     public void startStageTimer(final Quest quest) {
         if (getQuestDataOrDefault(quest).getDelayTimeLeft() > -1) {
-            plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, new BukkitStageTimer(plugin, this, quest),
+            plugin.getServer().getGlobalRegionScheduler().runDelayed(plugin, task -> new BukkitStageTimer(plugin, this, quest).run(),
                     (long) (getQuestDataOrDefault(quest).getDelayTimeLeft() * 0.02));
         } else {
-            plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, new BukkitStageTimer(plugin, this, quest),
+            plugin.getServer().getGlobalRegionScheduler().runDelayed(plugin, task -> new BukkitStageTimer(plugin, this, quest).run(),
                     (long) (getCurrentStage(quest).getDelay() * 0.02));
             if (getCurrentStage(quest).getDelayMessage() != null) {
                 final Player p = plugin.getServer().getPlayer(id);
@@ -4171,9 +4172,9 @@ public class BukkitQuester implements Quester {
             currentQuests.remove(quest);
             questProgress.remove(quest);
             if (!timers.isEmpty()) {
-                for (final Map.Entry<Integer, Quest> entry : timers.entrySet()) {
+                for (final Map.Entry<ScheduledTask, Quest> entry : timers.entrySet()) {
                     if (entry.getValue().getName().equals(quest.getName())) {
-                        plugin.getServer().getScheduler().cancelTask(entry.getKey());
+                        entry.getKey().cancel();
                         timers.remove(entry.getKey());
                     }
                 }
@@ -4307,7 +4308,7 @@ public class BukkitQuester implements Quester {
         if (getPlayer() == null || !getPlayer().hasPermission("quests.compass")) {
             return;
         }
-        Bukkit.getScheduler().runTaskAsynchronously(plugin, () -> {
+        Bukkit.getAsyncScheduler().runNow(plugin, (task) -> {
             final LinkedList<String> list = currentQuests.keySet().stream()
                     .sorted(Comparator.comparing(Quest::getName)).map(Quest::getId)
                     .collect(Collectors.toCollection(LinkedList::new));
@@ -4563,7 +4564,7 @@ public class BukkitQuester implements Quester {
                         .replace("<quest>", quest.getName()));
                 }
                 if (stage.getFailAction() != null) {
-                    plugin.getServer().getScheduler().runTask(plugin, () ->
+                    plugin.getServer().getGlobalRegionScheduler().run(plugin, (task) ->
                             getCurrentStage(quest).getFailAction().fire(this, quest));
                 }
                 hardQuit(quest);
-- 
2.45.1.windows.1

